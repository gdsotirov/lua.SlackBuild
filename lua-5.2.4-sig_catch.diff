# See https://lua-users.org/wiki/LuaPowerPatches
# Better signal handling in the interpreter on POSIX systems
# URL: https://lua-users.org/files/wiki_insecure/power_patches/5.2/lua-5.2.3-sig_catch.patch
diff -urNad lua-5.2.4-orig/src/lua.c lua-5.2.4/src/lua.c
--- lua-5.2.4-orig/src/lua.c	2013-04-12 21:48:47.000000000 +0300
+++ lua-5.2.4/src/lua.c	2015-05-02 13:22:16.000000000 +0300
@@ -99,8 +99,6 @@
 
 
 static void laction (int i) {
-  signal(i, SIG_DFL); /* if another SIGINT happens before lstop,
-                              terminate process (default action) */
   lua_sethook(globalL, lstop, LUA_MASKCALL | LUA_MASKRET | LUA_MASKCOUNT, 1);
 }
 
@@ -169,15 +167,25 @@
 }
 
 
+static void sig_catch(int sig, void (*handler)(int))
+{
+  struct sigaction sa;
+  sa.sa_handler = handler;
+  sa.sa_flags = 0;
+  sigemptyset(&sa.sa_mask);
+  sigaction(sig, &sa, 0);         /* XXX ignores errors */
+}
+
+
 static int docall (lua_State *L, int narg, int nres) {
   int status;
   int base = lua_gettop(L) - narg;  /* function index */
   lua_pushcfunction(L, traceback);  /* push traceback function */
   lua_insert(L, base);  /* put it under chunk and args */
   globalL = L;  /* to be available to 'laction' */
-  signal(SIGINT, laction);
+  sig_catch(SIGINT, laction);
   status = lua_pcall(L, narg, nres, base);
-  signal(SIGINT, SIG_DFL);
+  sig_catch(SIGINT, SIG_DFL);
   lua_remove(L, base);  /* remove traceback function */
   return status;
 }
